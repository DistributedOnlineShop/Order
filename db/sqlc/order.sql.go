// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: order.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createOrder = `-- name: CreateOrder :one
INSERT INTO orders (
    USER_ID,
    TOTAL_PRICE,
    STATUS,
    SHIPPING_ADDRESS_ID
) VALUES (
    $1,
    $2,
    $3,
    $4
) RETURNING order_id, user_id, total_price, status, shipping_address_id, created_at, updated_at
`

type CreateOrderParams struct {
	UserID            uuid.UUID      `json:"user_id"`
	TotalPrice        pgtype.Numeric `json:"total_price"`
	Status            string         `json:"status"`
	ShippingAddressID pgtype.UUID    `json:"shipping_address_id"`
}

func (q *Queries) CreateOrder(ctx context.Context, arg CreateOrderParams) (Order, error) {
	row := q.db.QueryRow(ctx, createOrder,
		arg.UserID,
		arg.TotalPrice,
		arg.Status,
		arg.ShippingAddressID,
	)
	var i Order
	err := row.Scan(
		&i.OrderID,
		&i.UserID,
		&i.TotalPrice,
		&i.Status,
		&i.ShippingAddressID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getOrderList = `-- name: GetOrderList :many
SELECT 
    order_id, user_id, total_price, status, shipping_address_id, created_at, updated_at 
FROM 
    orders
WHERE 
    user_id = $1
ORDER BY created_at DESC
`

func (q *Queries) GetOrderList(ctx context.Context, userID uuid.UUID) ([]Order, error) {
	rows, err := q.db.Query(ctx, getOrderList, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Order{}
	for rows.Next() {
		var i Order
		if err := rows.Scan(
			&i.OrderID,
			&i.UserID,
			&i.TotalPrice,
			&i.Status,
			&i.ShippingAddressID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateOrderAddress = `-- name: UpdateOrderAddress :one
UPDATE 
    ORDERS
SET 
    SHIPPING_ADDRESS_ID = $2,
    UPDATED_AT = NOW()
WHERE 
    ORDER_ID = $1 RETURNING order_id, user_id, total_price, status, shipping_address_id, created_at, updated_at
`

type UpdateOrderAddressParams struct {
	OrderID           uuid.UUID   `json:"order_id"`
	ShippingAddressID pgtype.UUID `json:"shipping_address_id"`
}

func (q *Queries) UpdateOrderAddress(ctx context.Context, arg UpdateOrderAddressParams) (Order, error) {
	row := q.db.QueryRow(ctx, updateOrderAddress, arg.OrderID, arg.ShippingAddressID)
	var i Order
	err := row.Scan(
		&i.OrderID,
		&i.UserID,
		&i.TotalPrice,
		&i.Status,
		&i.ShippingAddressID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateOrderStatus = `-- name: UpdateOrderStatus :one
UPDATE 
    ORDERS
SET 
    status = $2,
    updated_at = NOW()
WHERE 
    ORDER_ID = $1 RETURNING order_id, user_id, total_price, status, shipping_address_id, created_at, updated_at
`

type UpdateOrderStatusParams struct {
	OrderID uuid.UUID `json:"order_id"`
	Status  string    `json:"status"`
}

func (q *Queries) UpdateOrderStatus(ctx context.Context, arg UpdateOrderStatusParams) (Order, error) {
	row := q.db.QueryRow(ctx, updateOrderStatus, arg.OrderID, arg.Status)
	var i Order
	err := row.Scan(
		&i.OrderID,
		&i.UserID,
		&i.TotalPrice,
		&i.Status,
		&i.ShippingAddressID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
